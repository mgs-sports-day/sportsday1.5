{"version":3,"file":"static/js/530.ca792748.chunk.js","mappings":"yPAQe,SAASA,IACpB,IAAQC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAOC,EAAAA,EAAAA,UAAc,WACvB,GAAIH,EACA,OAAOI,EAAAA,EAAAA,IAAWJ,GAElB,MAAM,IAAIK,MAAM,0BAErB,CAACL,IAEJ,GAAsBM,EAAAA,EAAAA,IAAY,SAAAC,GAAG,OAAIA,EAAIC,eAAeN,EAAKO,KAAMP,EAAKA,SAArEQ,GAAP,eACA,GAAuBJ,EAAAA,EAAAA,IAAY,SAAAC,GAAG,OAAIA,EAAII,yBAAvCC,GAAP,eAEMC,GAAmBV,EAAAA,EAAAA,UAAQ,WAC7B,GAAKS,EACL,OAAOA,EAAaE,MAAK,SAAAC,GAAC,OAAIA,EAAEN,OAASP,EAAKO,MAAQM,EAAEb,OAASA,EAAKA,UACvE,CAACU,EAAcV,IAElB,OAAO,iCACH,SAAC,IAAD,CACIc,MAAO,CACH,CAAEC,KAAM,OAAQC,KAAM,KACtB,CAAED,KAAM,QAASC,KAAM,WAE3BC,QAASjB,EAAKO,KAAOP,EAAKA,QAG9B,0BACKA,EAAKO,KAAMP,EAAKA,MACjB,sDAKckB,IAAjBR,IAA8B,UAAC,IAAD,YAC3B,SAAC,IAAD,CAAUS,QAAS,CACf,CAACC,MAAO,gBACR,CAACA,MAAK,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAkBU,YAE9B,SAAC,IAAD,CAAUF,QAAS,CACf,CAACC,MAAO,mBACR,CAACA,MAAK,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAkBW,UAAWC,eAAe,OAExD,SAAC,IAAD,CAAUJ,QAAS,CACf,CAACC,MAAO,iBACR,CAACA,MAAK,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAkBa,QAASD,eAAe,cAIzCL,IAAhBV,IAA6B,SAAC,IAAD,CAC1BiB,OAAQ,CACJ,CAAEC,KAAM,QAASC,QAAS,GAC1B,CAAED,KAAM,eAAgBE,QAAS,GACjC,CAAEF,KAAM,eAAgBE,QAAS,GACjC,CAAEF,KAAM,eAAgBE,QAAS,GACjC,CAAEF,KAAM,eAAgBC,QAAS,GACjC,CAAED,KAAM,eAAgBC,QAAS,IAErCE,gBAAiB,CACb,CAAEH,KAAM,YACR,CAAEA,KAAM,UACR,CAAEA,KAAM,YACR,CAAEA,KAAM,UACR,CAAEA,KAAM,YACR,CAAEA,KAAM,WAfc,SAkBzBlB,EAAYsB,KAAI,SAAAC,GAAM,OAAI,SAAC,IAAD,CAEvBZ,QAAS,EACL,SAAC,KAAD,CAAMa,GAAE,kBAAaD,EAAOE,SAA5B,UACKC,EAAAA,EAAAA,IAAcH,EAAOE,WAE1B,CAAEb,MAAOW,EAAOI,KAAMZ,eAAe,GACrC,CAAEH,MAAOW,EAAOK,MAChB,CAAEhB,MAAOW,EAAOM,KAAMd,eAAe,GACrC,CAAEH,MAAOW,EAAOO,MAChB,CAAElB,MAAOW,EAAOQ,KAAMhB,eAAe,GACrC,CAAEH,MAAOW,EAAOS,MAChB,CAAEpB,MAAOW,EAAOU,OAChB,CAAErB,MAAOW,EAAOW,YAZfX,EAAOE","sources":["pages/Form/FormOverview.tsx"],"sourcesContent":["import { Link, useParams } from 'react-router-dom';\nimport { useMemo } from 'react';\nimport { eventIdToName, linkToForm } from '../../api/helpers';\nimport type { Form } from 'mgssportsday-api/dist/types';\nimport { useApiQuery } from '../../api/context';\nimport { Table, TableRow } from '../../components/Table';\nimport Breadcrumb from '../../components/Breadcrumb';\n\nexport default function FormOverview() {\n    const { formId } = useParams()\n    const form = useMemo<Form>(() => {\n        if (formId) {\n            return linkToForm(formId)\n        } else {\n            throw new Error(\"No form ID provided!\")\n        }\n    }, [formId])\n\n    const [formResults] = useApiQuery(api => api.getFormResults(form.year, form.form))\n    const [allStandings] = useApiQuery(api => api.getSummaryStandings())\n\n    const thisFormStanding = useMemo(() => {\n        if (!allStandings) return undefined\n        return allStandings.find(e => e.year === form.year && e.form === form.form)\n    }, [allStandings, form])\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n                { name: 'Forms', link: '/forms' },\n            ]}\n            current={form.year + form.form}\n        />\n\n        <h1>\n            {form.year}{form.form}\n            <span>\n                Event breakdown\n            </span>\n        </h1>\n\n        {allStandings !== undefined && <Table>\n            <TableRow columns={[\n                {value: 'Total points'},\n                {value: thisFormStanding?.points}\n            ]} />\n            <TableRow columns={[\n                {value: 'School position'},\n                {value: thisFormStanding?.schoolPos, autoHighlight: true}\n            ]} />\n            <TableRow columns={[\n                {value: 'Year position'},\n                {value: thisFormStanding?.yearPos, autoHighlight: true}\n            ]} />\n        </Table>}\n\n        {formResults !== undefined && <Table\n            header={[\n                { text: 'Event', rowSpan: 2 },\n                { text: 'Competitor A', colSpan: 2 },\n                { text: 'Competitor B', colSpan: 2 },\n                { text: 'Competitor C', colSpan: 2 },\n                { text: 'Record bonus', rowSpan: 2 },\n                { text: 'Total points', rowSpan: 2 },\n            ]}\n            secondaryHeader={[\n                { text: 'Position' },\n                { text: 'Points' },\n                { text: 'Position' },\n                { text: 'Points' },\n                { text: 'Position' },\n                { text: 'Points' },\n            ]}\n        >\n            {formResults.map(result => <TableRow\n                key={result.eventDb}\n                columns={[\n                    <Link to={`/events/${result.eventDb}`}>\n                        {eventIdToName(result.eventDb)}\n                    </Link>,\n                    { value: result.posA, autoHighlight: true },\n                    { value: result.ptsA },\n                    { value: result.posB, autoHighlight: true },\n                    { value: result.ptsB },\n                    { value: result.posC, autoHighlight: true },\n                    { value: result.ptsC },\n                    { value: result.ptsRB },\n                    { value: result.ptsTOTAL },\n                ]}\n            />)}\n        </Table>}\n    </>\n}\n"],"names":["FormOverview","formId","useParams","form","useMemo","linkToForm","Error","useApiQuery","api","getFormResults","year","formResults","getSummaryStandings","allStandings","thisFormStanding","find","e","paths","name","link","current","undefined","columns","value","points","schoolPos","autoHighlight","yearPos","header","text","rowSpan","colSpan","secondaryHeader","map","result","to","eventDb","eventIdToName","posA","ptsA","posB","ptsB","posC","ptsC","ptsRB","ptsTOTAL"],"sourceRoot":""}