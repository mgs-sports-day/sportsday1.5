{"version":3,"file":"static/js/988.66a29907.chunk.js","mappings":"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","sources":["webpack://sportsday1.5/./src/styles/Breadcrumb.module.scss?853d","components/Breadcrumb.tsx","webpack://sportsday1.5/./src/styles/TabSwitcher.module.scss?a1a8","components/TabSwitcher.tsx","pages/Event/EventOverview.tsx","pages/Form/FormsList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"breadcrumb\":\"Breadcrumb_breadcrumb__qk236\"};","import styles from '../styles/Breadcrumb.module.scss'\nimport { Link } from 'react-router-dom';\n\nexport default function Breadcrumb(\n    { paths, current }: {\n        paths: {\n            name: string,\n            link: string,\n        }[],\n        current: string,\n    }\n) {\n    return <div className={styles.breadcrumb}>\n        {paths.map(path => <Link to={path.link} key={path.link}>\n            {path.name}\n        </Link>)}\n        <p className={styles.last}>\n            {current}\n        </p>\n    </div>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TabSwitcher_container__G4mUd\",\"tabSelect\":\"TabSwitcher_tabSelect__hD89l\",\"active\":\"TabSwitcher_active__J2tLC\"};","import {ReactElement, useState} from 'react';\nimport tabSwitcher from '../styles/TabSwitcher.module.scss';\n\ninterface TabProps {\n    label: string | number;\n    dataKey?: string | number;\n    children?: ReactElement | ReactElement[];\n}\n\nexport function Tab(\n    {\n        label,\n        dataKey,\n        children,\n    }: TabProps,\n): ReactElement {\n    return <>{children}</>;\n}\n\nexport default function TabSwitcher(\n    {\n        children,\n        initialValue,\n    }: {\n        children?: ReactElement<TabProps> | ReactElement<TabProps>[];\n        initialValue?: string;\n    },\n) {\n    const getKey = (year: ReactElement<TabProps>) => year.props.dataKey || year.props.label;\n\n    const childrenList = children && (\n        children.hasOwnProperty('length') ?\n            children as ReactElement<TabProps>[] :\n            [children as ReactElement<TabProps>]\n    );\n    const [currentValue, setCurrentValue] = useState(\n        childrenList ? (initialValue || getKey(childrenList[0])) : null,\n    );\n\n    return (\n        <div className={tabSwitcher.container}>\n            <div className={tabSwitcher.tabSelect}>\n                {\n                    childrenList?.map(child => (\n                        <button\n                            className={currentValue === getKey(child) ? tabSwitcher.active : undefined}\n                            onClick={() => setCurrentValue(getKey(child))}\n                            key={getKey(child)}\n                        >\n                            {child.props.label}\n                        </button>\n                    ))\n                }\n            </div>\n\n            <div className={tabSwitcher.tabData}>\n                {\n                    childrenList?.filter(e => getKey(e) === currentValue)[0]\n                }\n            </div>\n        </div>\n    );\n}\n","import { EventResults, SportEventName, YearGroup } from 'mgssportsday-api/dist/types';\nimport { useParams } from 'react-router-dom';\nimport { useApiQuery } from '../../api/context';\nimport { eventIdToName } from '../../api/helpers';\nimport Breadcrumb from '../../components/Breadcrumb';\nimport ColourCodedFormLabel from '../../components/ColourCodedFormLabel';\nimport { Table, TableRow } from '../../components/Table';\nimport TabSwitcher, { Tab } from '../../components/TabSwitcher';\nimport { yearGroups } from '../Form/FormsList';\n\nexport default function EventOverview() {\n    const { eventId } = useParams();\n    const event = eventId! as SportEventName;\n    const prettyEventName = eventIdToName(event);\n\n    const eventStandings = [\n        useApiQuery(api => api.getEventResults(event, 7))[0],\n        useApiQuery(api => api.getEventResults(event, 8))[0],\n        useApiQuery(api => api.getEventResults(event, 9))[0],\n        useApiQuery(api => api.getEventResults(event, 10))[0],\n    ] as (EventResults | undefined)[];\n    const getFormsInYear = (year: YearGroup) => eventStandings[year - 7]?.total.map(e => e.letter);\n    const getFormRes = (yearIndex: number, form: string, group: keyof EventResults) => {\n        const yearEvents = eventStandings[yearIndex];\n        return yearEvents && yearEvents[group].filter(e => e.letter === form)[0];\n    };\n\n    console.log(eventStandings);\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n                { name: 'Events', link: '/events' },\n            ]}\n            current={prettyEventName}\n        />\n\n        <h1>\n            {prettyEventName}\n        </h1>\n\n        <TabSwitcher>\n            {\n                yearGroups.map((year, yearId) => (\n                    <Tab\n                        label={`Year ${year}`}\n                        key={year}\n                    >\n                        <Table\n                            header={[\n                                { text: 'Form', rowSpan: 2 },\n                                { text: 'Competitor A', colSpan: 2 },\n                                { text: 'Competitor B', colSpan: 2 },\n                                { text: 'Competitor C', colSpan: 2 },\n                                { text: 'Total points (with bonus)', rowSpan: 2, width: '10%', sortable: true },\n                                { text: 'Overall position', rowSpan: 2, sortable: true, width: '12%' },\n                            ]}\n                            secondaryHeader={[\n                                { text: 'Position', sortable: true },\n                                { text: 'Points', sortable: true },\n                                { text: 'Position', sortable: true },\n                                { text: 'Points', sortable: true },\n                                { text: 'Position', sortable: true },\n                                { text: 'Points', sortable: true },\n                            ]}\n                        >\n                            {getFormsInYear(year)\n                                ?.sort((a, b) => (\n                                    getFormRes(yearId, b, 'total')?.pts || 0\n                                ) - (\n                                    getFormRes(yearId, a, 'total')?.pts || 0\n                                ))\n                                .map(form => <TableRow\n                                    key={form}\n                                    columns={[\n                                        <ColourCodedFormLabel\n                                            form={{\n                                                year,\n                                                form,\n                                            }}\n                                        />,\n                                        { value: getFormRes(yearId, form, 'a')?.pos, autoHighlight: true },\n                                        { value: getFormRes(yearId, form, 'a')?.pts },\n                                        { value: getFormRes(yearId, form, 'b')?.pos, autoHighlight: true },\n                                        { value: getFormRes(yearId, form, 'b')?.pts },\n                                        { value: getFormRes(yearId, form, 'c')?.pos, autoHighlight: true },\n                                        { value: getFormRes(yearId, form, 'c')?.pts },\n                                        { value: getFormRes(yearId, form, 'total')?.pts },\n                                        { value: getFormRes(yearId, form, 'total')?.pos, autoHighlight: true },\n                                    ]}\n                                />)}\n                        </Table>\n                    </Tab>\n                ))\n            }\n        </TabSwitcher>\n    </>;\n}\n","import { YearGroup } from 'mgssportsday-api/dist/types';\nimport { useApiQuery } from '../../api/context';\nimport { formLabel } from '../../api/helpers';\nimport Breadcrumb from '../../components/Breadcrumb';\nimport ColourCodedFormLabel from '../../components/ColourCodedFormLabel';\nimport { Table, TableRow } from '../../components/Table';\nimport TabSwitcher, { Tab } from '../../components/TabSwitcher';\n\nexport const yearGroups: YearGroup[] = [7, 8, 9, 10];\n\nexport default function FormsList() {\n    const [allStandings] = useApiQuery(api => api.getSummaryStandings());\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n            ]}\n            current='Forms'\n        />\n\n        <h1>All forms</h1>\n\n        <TabSwitcher>\n            {\n                yearGroups.map(year => (\n                    <Tab\n                        label={`Year ${year}`}\n                        key={year}\n                    >\n                        {\n                            allStandings && (\n                                <Table\n                                    header={[\n                                        { text: 'Form' },\n                                        { text: `Year ${year} rank`, sortable: true },\n                                        { text: 'School rank', sortable: true },\n                                        { text: 'Total points' },\n                                    ]}\n                                >\n                                    {\n                                        allStandings\n                                            .filter(form => form.year === year)\n                                            .map(form => (\n                                                <TableRow\n                                                    columns={[\n                                                        <ColourCodedFormLabel form={form} />,\n                                                        { value: form.yearPos, autoHighlight: true },\n                                                        { value: form.schoolPos, autoHighlight: true },\n                                                        { value: form.points },\n                                                    ]}\n                                                    key={formLabel(form)}\n                                                />\n                                            ))\n                                    }\n                                </Table>\n                            )\n                        }\n                    </Tab>\n                ))\n            }\n        </TabSwitcher>\n    </>;\n}\n"],"names":["Breadcrumb","paths","current","className","styles","map","path","to","link","name","Tab","label","dataKey","children","TabSwitcher","initialValue","getKey","year","props","childrenList","hasOwnProperty","useState","currentValue","setCurrentValue","tabSwitcher","child","undefined","onClick","filter","e","EventOverview","event","useParams","eventId","prettyEventName","eventIdToName","eventStandings","useApiQuery","api","getEventResults","getFormsInYear","total","letter","getFormRes","yearIndex","form","group","yearEvents","console","log","yearGroups","yearId","header","text","rowSpan","colSpan","width","sortable","secondaryHeader","sort","a","b","pts","columns","value","pos","autoHighlight","FormsList","getSummaryStandings","allStandings","yearPos","schoolPos","points","formLabel"],"sourceRoot":""}