{"version":3,"file":"static/js/398.5b235375.chunk.js","mappings":"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","sources":["webpack://sportsday1.5/./src/styles/Breadcrumb.module.scss?853d","components/Breadcrumb.tsx","components/EventDataTable.tsx","webpack://sportsday1.5/./src/styles/TabSwitcher.module.scss?a1a8","components/TabSwitcher.tsx","components/EventStandingTable.tsx","pages/Event/EventOverview.tsx","pages/Form/FormsList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"breadcrumb\":\"Breadcrumb_breadcrumb__qk236\"};","import styles from '../styles/Breadcrumb.module.scss'\nimport { Link } from 'react-router-dom';\n\nexport default function Breadcrumb(\n    { paths, current }: {\n        paths: {\n            name: string,\n            link: string,\n        }[],\n        current: string,\n    }\n) {\n    return <div className={styles.breadcrumb}>\n        {paths.map(path => <Link to={path.link} key={path.link}>\n            {path.name}\n        </Link>)}\n        <p className={styles.last}>\n            {current}\n        </p>\n    </div>\n}\n","import { ReactElement, useMemo } from 'react';\nimport { useWindowSize } from 'usehooks-ts';\nimport { RowValue, Table, TableRow } from './Table';\n\ninterface Props {\n    firstRowHeading: string;\n    rows?: RowValue[][];\n}\n\nexport default function EventDataTable(\n    {\n        firstRowHeading,\n        rows\n    }: Props,\n): ReactElement {\n    const totalRowHeader = { text: 'Total points', rowSpan: 2, width: '15%', sortable: true };\n    const { width } = useWindowSize();\n    const totalRowFirst = width <= 450;\n\n    const sortedColumns = useMemo(() => {\n        return rows?.map(row => [\n            row[0],\n            ...(totalRowFirst ? [row.slice(-1)[0]] : []),\n            ...row.slice(1, -1),\n            ...(totalRowFirst ? [] : [row.slice(-1)[0]]),\n        ]);\n    }, [rows, totalRowFirst]);\n\n    if (!sortedColumns) {\n        return <></>;\n    }\n\n    return (\n        <Table\n            header={[\n                { text: firstRowHeading, rowSpan: 2 },\n                ...(totalRowFirst ? [totalRowHeader] : []),\n                { text: 'Competitor A', colSpan: 2 },\n                { text: 'Competitor B', colSpan: 2 },\n                { text: 'Competitor C', colSpan: 2 },\n                { text: 'Record bonus', rowSpan: 2, width: '10%' },\n                ...(totalRowFirst ? [] : [totalRowHeader]),\n            ]}\n            secondaryHeader={[\n                { text: 'Position', sortable: true },\n                { text: 'Points', sortable: true },\n                { text: 'Position', sortable: true },\n                { text: 'Points', sortable: true },\n                { text: 'Position', sortable: true },\n                { text: 'Points', sortable: true },\n            ]}\n        >\n            {\n                sortedColumns.map((e, i) => <TableRow columns={e} key={i} />)\n            }\n        </Table>\n    );\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TabSwitcher_container__G4mUd\",\"tabSelect\":\"TabSwitcher_tabSelect__hD89l\",\"active\":\"TabSwitcher_active__J2tLC\"};","import { ReactElement, useCallback, useState } from 'react';\nimport tabSwitcher from '../styles/TabSwitcher.module.scss';\n\ntype TabProps<T extends string | number> = {\n    label: T;\n    dataKey?: T | string | number;\n    children?: ReactElement | ReactElement[];\n}\n\nexport function Tab<T extends string | number>(\n    {\n        children,\n    }: TabProps<T>,\n): ReactElement {\n    return <>{children}</>;\n}\n\nexport default function TabSwitcher<T extends number | string>(\n    {\n        children,\n        initialValue,\n        onChange,\n    }: {\n        children?: ReactElement<TabProps<T>> | ReactElement<TabProps<T>>[];\n        initialValue?: T;\n        onChange?: (value: T | string | number) => void;\n    },\n) {\n    const getKey = (year: ReactElement<TabProps<T>>) => year.props.dataKey ?? year.props.label as T;\n\n    const childrenList = children && (\n        children.hasOwnProperty('length') ?\n            children as ReactElement<TabProps<T>>[] :\n            [children as ReactElement<TabProps<T>>]\n    );\n    const [currentValue, setCurrentValue] = useState(\n        childrenList ? (initialValue ?? getKey(childrenList[0])) : null,\n    );\n\n    const setTab = useCallback((value: T | string | number) => {\n        onChange && onChange(value);\n        setCurrentValue(value);\n    }, [onChange]);\n\n    return (\n        <div className={tabSwitcher.container}>\n            <div className={tabSwitcher.tabSelect}>\n                {\n                    childrenList?.map(child => (\n                        <button\n                            className={currentValue === getKey(child) ? tabSwitcher.active : undefined}\n                            onClick={() => setTab(getKey(child))}\n                            key={getKey(child)}\n                        >\n                            {child.props.label}\n                        </button>\n                    ))\n                }\n            </div>\n\n            <div className={tabSwitcher.tabData}>\n                {\n                    childrenList?.filter(e => getKey(e) === currentValue)[0]\n                }\n            </div>\n        </div>\n    );\n}\n","import { EventResults, SportEventName, YearGroup } from 'mgssportsday-api/dist/types';\nimport { ReactElement, useCallback, useMemo } from 'react';\nimport { useApiQuery } from '../api/context';\nimport ColourCodedFormLabel from './ColourCodedFormLabel';\nimport EventDataTable from './EventDataTable';\n\ntype ArraySpec<T extends any[]> = T extends (infer U)[] ? U : never;\n\nexport default function EventStandingTable(\n    {\n        year,\n        event,\n    }: {\n        year: YearGroup,\n        event: SportEventName\n    },\n): ReactElement {\n    const standings = useApiQuery(api => api.getEventResults(event, year))[0] as EventResults | undefined;\n\n    const forms = standings?.total.map(e => e.letter);\n    const getFormRes = useCallback(<T extends keyof EventResults>(form: string, group: T) => {\n        return standings && (standings[group].filter(e => e.letter === form)[0] as ArraySpec<EventResults[T]>);\n    }, [standings]);\n\n    const tableContents = useMemo(() => {\n        return forms\n            ?.sort((a, b) => (\n                getFormRes(b, 'total')?.pts || 0\n            ) - (\n                getFormRes(a, 'total')?.pts || 0\n            ))\n            .map(form => {\n                    return [\n                        <ColourCodedFormLabel\n                            form={{\n                                year,\n                                form,\n                            }}\n                        />,\n                        { value: getFormRes(form, 'a')?.pos, autoHighlight: true },\n                        { value: getFormRes(form, 'a')?.pts },\n                        { value: getFormRes(form, 'b')?.pos, autoHighlight: true },\n                        { value: getFormRes(form, 'b')?.pts },\n                        { value: getFormRes(form, 'c')?.pos, autoHighlight: true },\n                        { value: getFormRes(form, 'c')?.pts },\n                        { value: getFormRes(form, 'rb')?.pts },\n                        { value: getFormRes(form, 'total')?.pts },\n                    ];\n                },\n            );\n    }, [forms, standings]);\n\n    return (\n        <EventDataTable\n            rows={tableContents}\n            firstRowHeading='Form'\n        />\n    );\n}\n","import { SportEventName, YearGroup } from 'mgssportsday-api/dist/types';\nimport { useParams } from 'react-router-dom';\nimport { eventIdToName, useDefaultTab } from '../../api/helpers';\nimport Breadcrumb from '../../components/Breadcrumb';\nimport EventStandingTable from '../../components/EventStandingTable';\nimport TabSwitcher, { Tab } from '../../components/TabSwitcher';\nimport { yearGroups } from '../Form/FormsList';\n\nexport default function EventOverview() {\n    const { eventId } = useParams();\n    const event = eventId! as SportEventName;\n    const prettyEventName = eventIdToName(event);\n\n    const [defaultTab, setDefaultTab] = useDefaultTab();\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n                { name: 'Events', link: '/events' },\n            ]}\n            current={prettyEventName}\n        />\n\n        <h1>\n            {prettyEventName}\n        </h1>\n\n        <TabSwitcher\n            initialValue={defaultTab}\n            onChange={setDefaultTab as (newValue: any) => void}\n        >\n            {\n                yearGroups.map((year) => (\n                    <Tab\n                        label={`Year ${year}`}\n                        dataKey={year}\n                        key={year}\n                    >\n                        <EventStandingTable\n                            event={event}\n                            year={year}\n                        />\n                    </Tab>\n                ))\n            }\n        </TabSwitcher>\n    </>;\n}\n","import { YearGroup } from 'mgssportsday-api/dist/types';\nimport { useApiQuery } from '../../api/context';\nimport { formLabel, useDefaultTab } from '../../api/helpers';\nimport Breadcrumb from '../../components/Breadcrumb';\nimport ColourCodedFormLabel from '../../components/ColourCodedFormLabel';\nimport { Table, TableRow } from '../../components/Table';\nimport TabSwitcher, { Tab } from '../../components/TabSwitcher';\n\nexport const yearGroups: YearGroup[] = [7, 8, 9, 10];\n\nexport default function FormsList() {\n    const [allStandings] = useApiQuery(api => api.getSummaryStandings());\n    const [defaultTab, setDefaultTab] = useDefaultTab();\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n            ]}\n            current='Forms'\n        />\n\n        <h1>All forms</h1>\n\n        <TabSwitcher\n            initialValue={defaultTab}\n            onChange={setDefaultTab as (newValue: any) => void}\n        >\n            {\n                yearGroups.map(year => (\n                    <Tab\n                        label={`Year ${year}`}\n                        key={year}\n                        dataKey={year}\n                    >\n                        {\n                            allStandings && (\n                                <Table\n                                    header={[\n                                        { text: 'Form' },\n                                        { text: `Year ${year} rank`, sortable: true },\n                                        { text: 'School rank', sortable: true },\n                                        { text: 'Total points' },\n                                    ]}\n                                >\n                                    {\n                                        allStandings\n                                            .filter(form => form.year === year)\n                                            .map(form => (\n                                                <TableRow\n                                                    columns={[\n                                                        <ColourCodedFormLabel form={form} />,\n                                                        { value: form.yearPos, autoHighlight: true },\n                                                        { value: form.schoolPos, autoHighlight: true },\n                                                        { value: form.points },\n                                                    ]}\n                                                    key={formLabel(form)}\n                                                />\n                                            ))\n                                    }\n                                </Table>\n                            )\n                        }\n                    </Tab>\n                ))\n            }\n        </TabSwitcher>\n    </>;\n}\n"],"names":["Breadcrumb","paths","current","className","styles","map","path","to","link","name","EventDataTable","firstRowHeading","rows","totalRowHeader","text","rowSpan","width","sortable","totalRowFirst","useWindowSize","sortedColumns","useMemo","row","slice","header","colSpan","secondaryHeader","e","i","columns","Tab","children","TabSwitcher","initialValue","onChange","getKey","year","props","dataKey","label","childrenList","hasOwnProperty","useState","currentValue","setCurrentValue","setTab","useCallback","value","tabSwitcher","child","undefined","onClick","filter","EventStandingTable","event","standings","useApiQuery","api","getEventResults","forms","total","letter","getFormRes","form","group","tableContents","sort","a","b","pts","ColourCodedFormLabel","pos","autoHighlight","EventOverview","useParams","eventId","prettyEventName","eventIdToName","useDefaultTab","defaultTab","setDefaultTab","yearGroups","FormsList","getSummaryStandings","allStandings","yearPos","schoolPos","points","formLabel"],"sourceRoot":""}