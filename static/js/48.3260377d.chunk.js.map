{"version":3,"file":"static/js/48.3260377d.chunk.js","mappings":"oJACA,OAAgB,WAAa,gC,mBCEd,SAASA,EAAT,GAQZ,IAPGC,EAOJ,EAPIA,MAAOC,EAOX,EAPWA,QAQT,OAAO,iBAAKC,UAAWC,EAAAA,WAAhB,UACFH,EAAMI,KAAI,SAAAC,GAAI,OAAI,SAAC,KAAD,CAAMC,GAAID,EAAKE,KAAf,SACdF,EAAKG,MADmCH,EAAKE,UAGlD,cAAGL,UAAWC,EAAAA,KAAd,SACKF,S,mGChBb,GAAgB,UAAY,+BAA+B,UAAY,+BAA+B,OAAS,6B,SCQxG,SAASQ,EAAT,GAMS,EAJRC,MAIQ,EAHRC,QAGS,IAFTC,EAEQ,EAFRA,SAGJ,OAAO,8BAAGA,IAGC,SAASC,EAAT,GAQZ,IANKD,EAMN,EANMA,SACAE,EAKN,EALMA,aAMEC,EAAS,SAACC,GAAD,OAAkCA,EAAKC,MAAMN,SAAWK,EAAKC,MAAMP,OAE5EQ,EAAeN,IACjBA,EAASO,eAAe,UACpBP,EACA,CAACA,IAET,GAAwCQ,EAAAA,EAAAA,UACpCF,EAAgBJ,GAAgBC,EAAOG,EAAa,IAAO,MAD/D,eAAOG,EAAP,KAAqBC,EAArB,KAIA,OACI,iBAAKpB,UAAWqB,EAAAA,UAAhB,WACI,gBAAKrB,UAAWqB,EAAAA,UAAhB,gBAEQL,QAFR,IAEQA,OAFR,EAEQA,EAAcd,KAAI,SAAAoB,GAAK,OACnB,mBACItB,UAAWmB,IAAiBN,EAAOS,GAASD,EAAAA,YAAqBE,EACjEC,QAAS,kBAAMJ,EAAgBP,EAAOS,KAF1C,SAKKA,EAAMP,MAAMP,OAFRK,EAAOS,UAQ5B,gBAAKtB,UAAWqB,EAAAA,QAAhB,gBAEQL,QAFR,IAEQA,OAFR,EAEQA,EAAcS,QAAO,SAAAC,GAAC,OAAIb,EAAOa,KAAOP,KAAc,U,oLCjD7DQ,EAA0B,CAAC,EAAG,EAAG,EAAG,IAElC,SAASC,IACpB,OAAuBC,EAAAA,EAAAA,IAAY,SAAAC,GAAG,OAAIA,EAAIC,yBAAvCC,GAAP,eAEA,OAAO,iCACH,SAAC,IAAD,CACIlC,MAAO,CACH,CAAEQ,KAAM,OAAQD,KAAM,MAE1BN,QAAQ,WAGZ,uCAEA,SAAC,IAAD,UAEQ4B,EAAWzB,KAAI,SAAAY,GAAI,OACf,SAAC,IAAD,CACIN,MAAK,eAAUM,GADnB,SAKQkB,IACI,SAAC,IAAD,CACIC,OAAQ,CACJ,CAAEC,KAAM,QACR,CAAEA,KAAK,QAAD,OAAUpB,EAAV,SAAuBqB,UAAU,GACvC,CAAED,KAAM,cAAeC,UAAU,GACjC,CAAED,KAAM,iBALhB,SASQF,EACKP,QAAO,SAAAW,GAAI,OAAIA,EAAKtB,OAASA,KAC7BZ,KAAI,SAAAkC,GAAI,OACL,SAAC,IAAD,CACIC,QAAS,EACL,SAAC,IAAD,CAAsBD,KAAMA,IAC5B,CAAEE,MAAOF,EAAKG,QAASC,eAAe,GACtC,CAAEF,MAAOF,EAAKK,UAAWD,eAAe,GACxC,CAAEF,MAAOF,EAAKM,WAEbC,EAAAA,EAAAA,IAAUP,UAvBtCtB,a,+JCnBd,SAAS8B,IAAmB,IAAD,EAChCC,EAAmB,EACrBhB,EAAAA,EAAAA,IAAY,SAAAC,GAAG,OAAIA,EAAIgB,oBAAoB,MAAI,IAC/CjB,EAAAA,EAAAA,IAAY,SAAAC,GAAG,OAAIA,EAAIgB,oBAAoB,MAAI,IAC/CjB,EAAAA,EAAAA,IAAY,SAAAC,GAAG,OAAIA,EAAIgB,oBAAoB,MAAI,IAC/CjB,EAAAA,EAAAA,IAAY,SAAAC,GAAG,OAAIA,EAAIgB,oBAAoB,OAAK,IAG9CC,EAAgB,SAClBpB,EACAqB,EACAC,GAHkB,OAIjBtB,EACAzB,KAAI,SAAAgD,GAAS,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAWzB,QAAO,SAAA0B,GAAc,OAAIA,EAAeH,QAAUA,EAAMA,SAAO,MAC3F9C,KAAI,SAACkD,EAAWF,GAAZ,MAAyF,CAC1FE,EACAF,EACAE,GAAaA,EAAUH,OAE1BxB,QAAO,SAAAC,GAAC,OAAIA,EAAE,MACd2B,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,IAAMD,EAAE,GAAqB,WAAhBN,EAAMQ,MAAqBF,EAAE,GAAKC,EAAE,GAAKA,EAAE,GAAKD,EAAE,GAAK,OAAM,IAC1FG,EAAO,UACNZ,EADM,WAETA,EAAiB,UAFR,aAET,EAAqB3C,KAAI,SAAC8C,GAAgC,IAAD,QAC/CU,EAAcX,EAAcF,EAAkBG,EAAO,gBACrDW,EAAeZ,EAAcF,EAAkBG,EAAO,iBAE5D,MAAO,CACHY,QAASZ,EAAMY,QACfZ,MAAOA,EAAMA,MACbQ,MAAOR,EAAMQ,MAEbK,eAAgBF,GAAgBA,EAAa,GAA7B,UACTA,EAAa,GAAGE,eADP,cAC2BlC,EAAAA,WAAWgC,EAAa,IADnD,KAEZ,GACJG,aAAcH,IAAY,UAAIA,EAAa,UAAjB,aAAI,EAAiBG,eAAgB,KAC/DC,cAAeJ,IAAY,UAAIA,EAAa,UAAjB,aAAI,EAAiBI,gBAAiB,EAEjEC,cAAeN,GAAeA,EAAY,GAA3B,UACRA,EAAY,GAAGG,eADP,cAC2BlC,EAAAA,WAAW+B,EAAY,IADlD,KAEX,GACJO,YAAaP,IAAW,UAAIA,EAAY,UAAhB,aAAI,EAAgBO,cAAe,KAC3DC,aAAcR,IAAW,UAAIA,EAAY,UAAhB,aAAI,EAAgBQ,eAAgB,QAKzE,OAAO,iCACH,SAAC,IAAD,CACIpE,MAAO,CACH,CAAEQ,KAAM,OAAQD,KAAM,MAE1BN,QAAQ,aAGZ,qCAEA,SAAC,IAAD,UAEQ,kBACO4B,EAAAA,WAAAA,KAAe,SAAAD,GAAC,qBAAYA,OADnC,CAEI,QACFxB,KAAI,SAACY,EAAMqD,GAAP,aACF,SAAC,IAAD,CACI3D,MAAOM,EADX,SAKQ2C,EAAQU,KACJ,SAAC,IAAD,CACIlC,OAAQ,CACJ,CAAEC,KAAM,SACR,CAAEA,KAAK,cAAgBC,UAAU,GACjC,CAAED,KAAM,eAAgBC,UAAU,GAClC,CAAED,KAAK,kBAAoBC,UAAU,GACrC,CAAED,KAAM,kBANhB,mBAUQuB,EAAQU,UAVhB,aAUQ,EACMjE,KAAI,SAAA8C,GAAK,OACP,SAAC,IAAD,CACIX,QAAS,EACL,SAAC,KAAD,CAAMjC,GAAE,kBAAa4C,EAAMA,OAA3B,UACKoB,EAAAA,EAAAA,IAAcpB,EAAMA,SAEzB,CAAEV,MAAOU,EAAMc,cACf,CACIxB,MAAM,GAAD,OAAKU,EAAMe,eAAX,QAA2BM,EAAAA,EAAAA,GAAiBrB,EAAMQ,QACvDc,UAAWtB,EAAMe,eAErB,CACIzB,MAAOU,EAAMkB,aAAN,UACAlB,EAAMkB,cADN,QACqBG,EAAAA,EAAAA,GAAiBrB,EAAMQ,QAC/C,GACJc,UAAWtB,EAAMkB,eAAiB,KAEtC,CAAE5B,MAAOU,EAAMgB,iBAEdhB,EAAMA,aAlClClC","sources":["webpack://sportsday1.5/./src/styles/Breadcrumb.module.scss?853d","components/Breadcrumb.tsx","webpack://sportsday1.5/./src/styles/TabSwitcher.module.scss?a1a8","components/TabSwitcher.tsx","pages/Form/FormsList.tsx","pages/RecordsOverview.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"breadcrumb\":\"Breadcrumb_breadcrumb__qk236\"};","import styles from '../styles/Breadcrumb.module.scss'\nimport { Link } from 'react-router-dom';\n\nexport default function Breadcrumb(\n    { paths, current }: {\n        paths: {\n            name: string,\n            link: string,\n        }[],\n        current: string,\n    }\n) {\n    return <div className={styles.breadcrumb}>\n        {paths.map(path => <Link to={path.link} key={path.link}>\n            {path.name}\n        </Link>)}\n        <p className={styles.last}>\n            {current}\n        </p>\n    </div>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TabSwitcher_container__G4mUd\",\"tabSelect\":\"TabSwitcher_tabSelect__hD89l\",\"active\":\"TabSwitcher_active__J2tLC\"};","import {ReactElement, useState} from 'react';\nimport tabSwitcher from '../styles/TabSwitcher.module.scss';\n\ninterface TabProps {\n    label: string | number;\n    dataKey?: string | number;\n    children?: ReactElement | ReactElement[];\n}\n\nexport function Tab(\n    {\n        label,\n        dataKey,\n        children,\n    }: TabProps,\n): ReactElement {\n    return <>{children}</>;\n}\n\nexport default function TabSwitcher(\n    {\n        children,\n        initialValue,\n    }: {\n        children?: ReactElement<TabProps> | ReactElement<TabProps>[];\n        initialValue?: string;\n    },\n) {\n    const getKey = (year: ReactElement<TabProps>) => year.props.dataKey || year.props.label;\n\n    const childrenList = children && (\n        children.hasOwnProperty('length') ?\n            children as ReactElement<TabProps>[] :\n            [children as ReactElement<TabProps>]\n    );\n    const [currentValue, setCurrentValue] = useState(\n        childrenList ? (initialValue || getKey(childrenList[0])) : null,\n    );\n\n    return (\n        <div className={tabSwitcher.container}>\n            <div className={tabSwitcher.tabSelect}>\n                {\n                    childrenList?.map(child => (\n                        <button\n                            className={currentValue === getKey(child) ? tabSwitcher.active : undefined}\n                            onClick={() => setCurrentValue(getKey(child))}\n                            key={getKey(child)}\n                        >\n                            {child.props.label}\n                        </button>\n                    ))\n                }\n            </div>\n\n            <div className={tabSwitcher.tabData}>\n                {\n                    childrenList?.filter(e => getKey(e) === currentValue)[0]\n                }\n            </div>\n        </div>\n    );\n}\n","import { YearGroup } from 'mgssportsday-api/dist/types';\nimport { useApiQuery } from '../../api/context';\nimport { formLabel } from '../../api/helpers';\nimport Breadcrumb from '../../components/Breadcrumb';\nimport ColourCodedFormLabel from '../../components/ColourCodedFormLabel';\nimport { Table, TableRow } from '../../components/Table';\nimport TabSwitcher, { Tab } from '../../components/TabSwitcher';\n\nexport const yearGroups: YearGroup[] = [7, 8, 9, 10];\n\nexport default function FormsList() {\n    const [allStandings] = useApiQuery(api => api.getSummaryStandings());\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n            ]}\n            current='Forms'\n        />\n\n        <h1>All forms</h1>\n\n        <TabSwitcher>\n            {\n                yearGroups.map(year => (\n                    <Tab\n                        label={`Year ${year}`}\n                        key={year}\n                    >\n                        {\n                            allStandings && (\n                                <Table\n                                    header={[\n                                        { text: 'Form' },\n                                        { text: `Year ${year} rank`, sortable: true },\n                                        { text: 'School rank', sortable: true },\n                                        { text: 'Total points' },\n                                    ]}\n                                >\n                                    {\n                                        allStandings\n                                            .filter(form => form.year === year)\n                                            .map(form => (\n                                                <TableRow\n                                                    columns={[\n                                                        <ColourCodedFormLabel form={form} />,\n                                                        { value: form.yearPos, autoHighlight: true },\n                                                        { value: form.schoolPos, autoHighlight: true },\n                                                        { value: form.points },\n                                                    ]}\n                                                    key={formLabel(form)}\n                                                />\n                                            ))\n                                    }\n                                </Table>\n                            )\n                        }\n                    </Tab>\n                ))\n            }\n        </TabSwitcher>\n    </>;\n}\n","import { EventRecordStanding } from 'mgssportsday-api/dist/types';\nimport { Link } from 'react-router-dom';\nimport { useApiQuery } from '../api/context';\nimport { eventIdToName, unitNameToSuffix } from '../api/helpers';\nimport Breadcrumb from '../components/Breadcrumb';\nimport { Table, TableRow } from '../components/Table';\nimport TabSwitcher, { Tab } from '../components/TabSwitcher';\nimport { yearGroups } from './Form/FormsList';\n\nexport default function RecordsOverview() {\n    const yearGroupRecords = [\n        useApiQuery(api => api.getYearGroupRecords(7))[0],\n        useApiQuery(api => api.getYearGroupRecords(8))[0],\n        useApiQuery(api => api.getYearGroupRecords(9))[0],\n        useApiQuery(api => api.getYearGroupRecords(10))[0],\n    ];\n\n    const getBestRecord = (\n        yearGroups: (EventRecordStanding[] | undefined)[],\n        event: EventRecordStanding,\n        key: keyof EventRecordStanding,\n    ) => yearGroups\n        .map(yearGroup => yearGroup?.filter(yearGroupEvent => yearGroupEvent.event === event.event)[0])\n        .map((ygResults, yearGroup): [EventRecordStanding | undefined, number, number | undefined] => [\n            ygResults,\n            yearGroup,\n            ygResults && ygResults[key] as number,\n        ])\n        .filter(e => e[2])\n        .sort((a, b) => b[2] && a[2] ? event.units === 'second' ? a[2] - b[2] : b[2] - a[2] : 1000)[0];\n    const records = [\n        ...yearGroupRecords,\n        yearGroupRecords[0]?.map((event): EventRecordStanding => {\n            const bestCurrent = getBestRecord(yearGroupRecords, event, 'currentScore');\n            const bestStanding = getBestRecord(yearGroupRecords, event, 'standingScore');\n\n            return {\n                doScore: event.doScore,\n                event: event.event,\n                units: event.units,\n\n                standingHolder: bestStanding && bestStanding[0] ?\n                    `${bestStanding[0].standingHolder} (y${yearGroups[bestStanding[1]]})` :\n                    '',\n                standingYear: bestStanding && bestStanding[0]?.standingYear || 2021,\n                standingScore: bestStanding && bestStanding[0]?.standingScore || 0,\n\n                currentHolder: bestCurrent && bestCurrent[0] ?\n                    `${bestCurrent[0].standingHolder} (y${yearGroups[bestCurrent[1]]})` :\n                    '',\n                currentYear: bestCurrent && bestCurrent[0]?.currentYear || 2021,\n                currentScore: bestCurrent && bestCurrent[0]?.currentScore || 0,\n            };\n        }),\n    ];\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n            ]}\n            current='Records'\n        />\n\n        <h1>Records</h1>\n\n        <TabSwitcher>\n            {\n                [\n                    ...yearGroups.map(e => `Year ${e}`),\n                    'All',\n                ].map((year, yearIndex) => (\n                    <Tab\n                        label={year}\n                        key={year}\n                    >\n                        {\n                            records[yearIndex] && (\n                                <Table\n                                    header={[\n                                        { text: 'Event' },\n                                        { text: `Record year`, sortable: true },\n                                        { text: 'Record score', sortable: true },\n                                        { text: `2022 best score`, sortable: true },\n                                        { text: '2022 champion' },\n                                    ]}\n                                >\n                                    {\n                                        records[yearIndex]\n                                            ?.map(event => (\n                                                <TableRow\n                                                    columns={[\n                                                        <Link to={`/events/${event.event}`}>\n                                                            {eventIdToName(event.event)}\n                                                        </Link>,\n                                                        { value: event.standingYear },\n                                                        {\n                                                            value: `${event.standingScore}${unitNameToSuffix(event.units)}`,\n                                                            sortValue: event.standingScore,\n                                                        },\n                                                        {\n                                                            value: event.currentScore ?\n                                                                `${event.currentScore}${unitNameToSuffix(event.units)}` :\n                                                                '',\n                                                            sortValue: event.currentScore || -100,\n                                                        },\n                                                        { value: event.currentHolder },\n                                                    ]}\n                                                    key={event.event}\n                                                />\n                                            ))\n                                    }\n                                </Table>\n                            )\n                        }\n                    </Tab>\n                ))\n            }\n        </TabSwitcher>\n    </>;\n}\n"],"names":["Breadcrumb","paths","current","className","styles","map","path","to","link","name","Tab","label","dataKey","children","TabSwitcher","initialValue","getKey","year","props","childrenList","hasOwnProperty","useState","currentValue","setCurrentValue","tabSwitcher","child","undefined","onClick","filter","e","yearGroups","FormsList","useApiQuery","api","getSummaryStandings","allStandings","header","text","sortable","form","columns","value","yearPos","autoHighlight","schoolPos","points","formLabel","RecordsOverview","yearGroupRecords","getYearGroupRecords","getBestRecord","event","key","yearGroup","yearGroupEvent","ygResults","sort","a","b","units","records","bestCurrent","bestStanding","doScore","standingHolder","standingYear","standingScore","currentHolder","currentYear","currentScore","yearIndex","eventIdToName","unitNameToSuffix","sortValue"],"sourceRoot":""}