{"version":3,"file":"static/js/604.f912f81e.chunk.js","mappings":"iJACA,OAAgB,WAAa,gC,mBCEd,SAASA,EAAT,GAQZ,IAPGC,EAOJ,EAPIA,MAAOC,EAOX,EAPWA,QAQT,OAAO,iBAAKC,UAAWC,EAAAA,WAAhB,UACFH,EAAMI,KAAI,SAAAC,GAAI,OAAI,SAAC,KAAD,CAAMC,GAAID,EAAKE,KAAf,SACdF,EAAKG,MADmCH,EAAKE,UAGlD,cAAGL,UAAWC,EAAAA,KAAd,SACKF,S,2IChBb,GAAgB,UAAY,+BAA+B,UAAY,+BAA+B,OAAS,6B,SCQxG,SAASQ,EAAT,GAMS,EAJRC,MAIQ,EAHRC,QAGS,IAFTC,EAEQ,EAFRA,SAGJ,OAAO,8BAAGA,IAGC,SAASC,EAAT,GAQZ,IANKD,EAMN,EANMA,SACAE,EAKN,EALMA,aAMEC,EAAS,SAACC,GAAD,OAAkCA,EAAKC,MAAMN,SAAWK,EAAKC,MAAMP,OAE5EQ,EAAeN,IACjBA,EAASO,eAAe,UACpBP,EACA,CAACA,IAET,GAAwCQ,EAAAA,EAAAA,UACpCF,EAAgBJ,GAAgBC,EAAOG,EAAa,IAAO,MAD/D,eAAOG,EAAP,KAAqBC,EAArB,KAIA,OACI,iBAAKpB,UAAWqB,EAAAA,UAAhB,WACI,gBAAKrB,UAAWqB,EAAAA,UAAhB,gBAEQL,QAFR,IAEQA,OAFR,EAEQA,EAAcd,KAAI,SAAAoB,GAAK,OACnB,mBACItB,UAAWmB,IAAiBN,EAAOS,GAASD,EAAAA,YAAqBE,EACjEC,QAAS,kBAAMJ,EAAgBP,EAAOS,KAF1C,SAKKA,EAAMP,MAAMP,OAFRK,EAAOS,UAQ5B,gBAAKtB,UAAWqB,EAAAA,QAAhB,gBAEQL,QAFR,IAEQA,OAFR,EAEQA,EAAcS,QAAO,SAAAC,GAAC,OAAIb,EAAOa,KAAOP,KAAc,QCjD1E,IAAMQ,EAA0B,CAAC,EAAG,EAAG,EAAG,IAE3B,SAASC,IACpB,OAAuBC,EAAAA,EAAAA,IAAY,SAAAC,GAAG,OAAIA,EAAIC,yBAAvCC,GAAP,eAEA,OAAO,iCACH,SAACnC,EAAA,EAAD,CACIC,MAAO,CACH,CAAEQ,KAAM,OAAQD,KAAM,MAE1BN,QAAQ,WAGZ,uCAEA,SAACY,EAAD,UAEQgB,EAAWzB,KAAI,SAAAY,GAAI,OACf,SAACP,EAAD,CACIC,MAAK,eAAUM,GADnB,SAKQkB,IACI,SAACC,EAAA,EAAD,CACIC,OAAQ,CACJ,CAAEC,KAAM,QACR,CAAEA,KAAK,QAAD,OAAUrB,EAAV,SAAuBsB,UAAU,GACvC,CAAED,KAAM,cAAeC,UAAU,GACjC,CAAED,KAAM,iBALhB,SASQH,EACKP,QAAO,SAAAY,GAAI,OAAIA,EAAKvB,OAASA,KAC7BZ,KAAI,SAAAmC,GAAI,OACL,SAACJ,EAAA,EAAD,CACIK,QAAS,EACL,SAACC,EAAA,EAAD,CAAsBF,KAAMA,IAC5B,CAAEG,MAAOH,EAAKI,QAASC,eAAe,GACtC,CAAEF,MAAOH,EAAKM,UAAWD,eAAe,GACxC,CAAEF,MAAOH,EAAKO,WAEbC,EAAAA,EAAAA,IAAUR,UAvBtCvB","sources":["webpack://sportsday1.5/./src/styles/Breadcrumb.module.scss?853d","components/Breadcrumb.tsx","webpack://sportsday1.5/./src/styles/TabSwitcher.module.scss?a1a8","components/TabSwitcher.tsx","pages/Form/FormsList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"breadcrumb\":\"Breadcrumb_breadcrumb__qk236\"};","import styles from '../styles/Breadcrumb.module.scss'\nimport { Link } from 'react-router-dom';\n\nexport default function Breadcrumb(\n    { paths, current }: {\n        paths: {\n            name: string,\n            link: string,\n        }[],\n        current: string,\n    }\n) {\n    return <div className={styles.breadcrumb}>\n        {paths.map(path => <Link to={path.link} key={path.link}>\n            {path.name}\n        </Link>)}\n        <p className={styles.last}>\n            {current}\n        </p>\n    </div>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TabSwitcher_container__G4mUd\",\"tabSelect\":\"TabSwitcher_tabSelect__hD89l\",\"active\":\"TabSwitcher_active__J2tLC\"};","import {ReactElement, useState} from 'react';\nimport tabSwitcher from '../styles/TabSwitcher.module.scss';\n\ninterface TabProps {\n    label: string | number;\n    dataKey?: string | number;\n    children?: ReactElement | ReactElement[];\n}\n\nexport function Tab(\n    {\n        label,\n        dataKey,\n        children,\n    }: TabProps,\n): ReactElement {\n    return <>{children}</>;\n}\n\nexport default function TabSwitcher(\n    {\n        children,\n        initialValue,\n    }: {\n        children?: ReactElement<TabProps> | ReactElement<TabProps>[];\n        initialValue?: string;\n    },\n) {\n    const getKey = (year: ReactElement<TabProps>) => year.props.dataKey || year.props.label;\n\n    const childrenList = children && (\n        children.hasOwnProperty('length') ?\n            children as ReactElement<TabProps>[] :\n            [children as ReactElement<TabProps>]\n    );\n    const [currentValue, setCurrentValue] = useState(\n        childrenList ? (initialValue || getKey(childrenList[0])) : null,\n    );\n\n    return (\n        <div className={tabSwitcher.container}>\n            <div className={tabSwitcher.tabSelect}>\n                {\n                    childrenList?.map(child => (\n                        <button\n                            className={currentValue === getKey(child) ? tabSwitcher.active : undefined}\n                            onClick={() => setCurrentValue(getKey(child))}\n                            key={getKey(child)}\n                        >\n                            {child.props.label}\n                        </button>\n                    ))\n                }\n            </div>\n\n            <div className={tabSwitcher.tabData}>\n                {\n                    childrenList?.filter(e => getKey(e) === currentValue)[0]\n                }\n            </div>\n        </div>\n    );\n}\n","import { YearGroup } from 'mgssportsday-api/dist/types';\nimport { useApiQuery } from '../../api/context';\nimport { formLabel } from '../../api/helpers';\nimport Breadcrumb from '../../components/Breadcrumb';\nimport ColourCodedFormLabel from '../../components/ColourCodedFormLabel';\nimport { Table, TableRow } from '../../components/Table';\nimport TabSwitcher, { Tab } from '../../components/TabSwitcher';\n\nconst yearGroups: YearGroup[] = [7, 8, 9, 10];\n\nexport default function FormsList() {\n    const [allStandings] = useApiQuery(api => api.getSummaryStandings());\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n            ]}\n            current='Forms'\n        />\n\n        <h1>All forms</h1>\n\n        <TabSwitcher>\n            {\n                yearGroups.map(year => (\n                    <Tab\n                        label={`Year ${year}`}\n                        key={year}\n                    >\n                        {\n                            allStandings && (\n                                <Table\n                                    header={[\n                                        { text: 'Form' },\n                                        { text: `Year ${year} rank`, sortable: true },\n                                        { text: 'School rank', sortable: true },\n                                        { text: 'Total points' },\n                                    ]}\n                                >\n                                    {\n                                        allStandings\n                                            .filter(form => form.year === year)\n                                            .map(form => (\n                                                <TableRow\n                                                    columns={[\n                                                        <ColourCodedFormLabel form={form} />,\n                                                        { value: form.yearPos, autoHighlight: true },\n                                                        { value: form.schoolPos, autoHighlight: true },\n                                                        { value: form.points },\n                                                    ]}\n                                                    key={formLabel(form)}\n                                                />\n                                            ))\n                                    }\n                                </Table>\n                            )\n                        }\n                    </Tab>\n                ))\n            }\n        </TabSwitcher>\n    </>;\n}\n"],"names":["Breadcrumb","paths","current","className","styles","map","path","to","link","name","Tab","label","dataKey","children","TabSwitcher","initialValue","getKey","year","props","childrenList","hasOwnProperty","useState","currentValue","setCurrentValue","tabSwitcher","child","undefined","onClick","filter","e","yearGroups","FormsList","useApiQuery","api","getSummaryStandings","allStandings","Table","header","text","sortable","form","columns","ColourCodedFormLabel","value","yearPos","autoHighlight","schoolPos","points","formLabel"],"sourceRoot":""}