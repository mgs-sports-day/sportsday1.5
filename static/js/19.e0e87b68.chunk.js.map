{"version":3,"file":"static/js/19.e0e87b68.chunk.js","mappings":"6JAoBA,ICfA,EAFoB,qBAAXA,OAAyBC,EAAAA,gBAAkBC,EAAAA,UCmEpD,MAtCA,SAKEC,EACAC,EAGAC,EACAC,GAGA,IAAMC,GAAeC,EAAAA,EAAAA,QAAOJ,GAE5BK,GAA0B,WACxBF,EAAaG,QAAUN,IACtB,CAACA,KAEJF,EAAAA,EAAAA,YAAU,WAER,IAAMS,GAAmC,OAAPN,QAAO,IAAPA,OAAA,EAAAA,EAASK,UAAWV,OACtD,GAAMW,GAAiBA,EAAcC,iBAArC,CAKA,IAAMC,EAAgC,SAAAC,GAAK,OAAIP,EAAaG,QAAQI,IAKpE,OAHAH,EAAcC,iBAAiBT,EAAWU,EAAeP,GAGlD,WACLK,EAAcI,oBAAoBZ,EAAWU,OAE9C,CAACV,EAAWE,EAASC,K,QCxC1B,I,SCSA,MAxBA,WACE,OAAoCU,EAAAA,EAAAA,UAAqB,CACvDC,MAAO,EACPC,OAAQ,IAFV,eAAOC,EAAP,KAAmBC,EAAnB,KAKMC,EAAa,WACjBD,EAAc,CACZH,MAAOjB,OAAOsB,WACdJ,OAAQlB,OAAOuB,eAYnB,OARAC,EAAiB,SAAUH,GAG3BZ,GAA0B,WACxBY,MAEC,IAEIF","sources":["../node_modules/usehooks-ts/src/useBoolean/useBoolean.ts","../node_modules/usehooks-ts/src/useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.ts","../node_modules/usehooks-ts/src/useEventListener/useEventListener.ts","../node_modules/usehooks-ts/src/useTimeout/useTimeout.ts","../node_modules/usehooks-ts/src/useWindowSize/useWindowSize.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useCallback, useState } from 'react'\n\ninterface ReturnType {\n  value: boolean\n  setValue: Dispatch<SetStateAction<boolean>>\n  setTrue: () => void\n  setFalse: () => void\n  toggle: () => void\n}\n\nfunction useBoolean(defaultValue?: boolean): ReturnType {\n  const [value, setValue] = useState(!!defaultValue)\n\n  const setTrue = useCallback(() => setValue(true), [])\n  const setFalse = useCallback(() => setValue(false), [])\n  const toggle = useCallback(() => setValue(x => !x), [])\n\n  return { value, setValue, setTrue, setFalse, toggle }\n}\n\nexport default useBoolean\n","import { useEffect, useLayoutEffect } from 'react'\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nexport default useIsomorphicLayoutEffect\n","import { RefObject, useEffect, useRef } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-isomorphic-layout-effect\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect'\n\n// Window Event based useEventListener interface\nfunction useEventListener<K extends keyof WindowEventMap>(\n  eventName: K,\n  handler: (event: WindowEventMap[K]) => void,\n  element?: undefined,\n  options?: boolean | AddEventListenerOptions,\n): void\n\n// Element Event based useEventListener interface\nfunction useEventListener<\n  K extends keyof HTMLElementEventMap,\n  T extends HTMLElement = HTMLDivElement,\n>(\n  eventName: K,\n  handler: (event: HTMLElementEventMap[K]) => void,\n  element: RefObject<T>,\n  options?: boolean | AddEventListenerOptions,\n): void\n\n// Document Event based useEventListener interface\nfunction useEventListener<K extends keyof DocumentEventMap>(\n  eventName: K,\n  handler: (event: DocumentEventMap[K]) => void,\n  element: RefObject<Document>,\n  options?: boolean | AddEventListenerOptions,\n): void\n\nfunction useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap,\n  T extends HTMLElement | void = void,\n>(\n  eventName: KW | KH,\n  handler: (\n    event: WindowEventMap[KW] | HTMLElementEventMap[KH] | Event,\n  ) => void,\n  element?: RefObject<T>,\n  options?: boolean | AddEventListenerOptions,\n) {\n  // Create a ref that stores handler\n  const savedHandler = useRef(handler)\n\n  useIsomorphicLayoutEffect(() => {\n    savedHandler.current = handler\n  }, [handler])\n\n  useEffect(() => {\n    // Define the listening target\n    const targetElement: T | Window = element?.current || window\n    if (!(targetElement && targetElement.addEventListener)) {\n      return\n    }\n\n    // Create event listener that calls handler function stored in ref\n    const eventListener: typeof handler = event => savedHandler.current(event)\n\n    targetElement.addEventListener(eventName, eventListener, options)\n\n    // Remove event listener on cleanup\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener)\n    }\n  }, [eventName, element, options])\n}\n\nexport default useEventListener\n","import { useEffect, useRef } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-isomorphic-layout-effect\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect'\n\nfunction useTimeout(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback)\n\n  // Remember the latest callback if it changes.\n  useIsomorphicLayoutEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the timeout.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    // Note: 0 is a valid value for delay.\n    if (!delay && delay !== 0) {\n      return\n    }\n\n    const id = setTimeout(() => savedCallback.current(), delay)\n\n    return () => clearTimeout(id)\n  }, [delay])\n}\n\nexport default useTimeout\n","import { useState } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-event-listener\nimport { useEventListener } from '../useEventListener'\n// See: https://usehooks-ts.com/react-hook/use-isomorphic-layout-effect\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect'\n\ninterface WindowSize {\n  width: number\n  height: number\n}\n\nfunction useWindowSize(): WindowSize {\n  const [windowSize, setWindowSize] = useState<WindowSize>({\n    width: 0,\n    height: 0,\n  })\n\n  const handleSize = () => {\n    setWindowSize({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    })\n  }\n\n  useEventListener('resize', handleSize)\n\n  // Set size at the first client-side load\n  useIsomorphicLayoutEffect(() => {\n    handleSize()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return windowSize\n}\n\nexport default useWindowSize\n"],"names":["window","useLayoutEffect","useEffect","eventName","handler","element","options","savedHandler","useRef","useIsomorphicLayoutEffect","current","targetElement","addEventListener","eventListener","event","removeEventListener","useState","width","height","windowSize","setWindowSize","handleSize","innerWidth","innerHeight","useEventListener"],"sourceRoot":""}