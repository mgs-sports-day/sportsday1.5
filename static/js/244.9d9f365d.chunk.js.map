{"version":3,"file":"static/js/244.9d9f365d.chunk.js","mappings":"iJACA,OAAgB,WAAa,gC,mBCEd,SAASA,EAAT,GAQZ,IAPGC,EAOJ,EAPIA,MAAOC,EAOX,EAPWA,QAQT,OAAO,iBAAKC,UAAWC,EAAAA,WAAhB,UACFH,EAAMI,KAAI,SAAAC,GAAI,OAAI,SAAC,KAAD,CAAMC,GAAID,EAAKE,KAAf,SACdF,EAAKG,MADmCH,EAAKE,UAGlD,cAAGL,UAAWC,EAAAA,KAAd,SACKF,S,gFCGb,ICfA,EAFoB,qBAAXQ,OAAyBC,EAAAA,gBAAkBC,EAAAA,UCmEpD,MAtCA,SAKEC,EACAC,EAGAC,EACAC,GAGA,IAAMC,GAAeC,EAAAA,EAAAA,QAAOJ,GAE5BK,GAA0B,WACxBF,EAAaf,QAAUY,IACtB,CAACA,KAEJF,EAAAA,EAAAA,YAAU,WAER,IAAMQ,GAAmC,OAAPL,QAAO,IAAPA,OAAA,EAAAA,EAASb,UAAWQ,OACtD,GAAMU,GAAiBA,EAAcC,iBAArC,CAKA,IAAMC,EAAgC,SAAAC,GAAK,OAAIN,EAAaf,QAAQqB,IAKpE,OAHAH,EAAcC,iBAAiBR,EAAWS,EAAeN,GAGlD,WACLI,EAAcI,oBAAoBX,EAAWS,OAE9C,CAACT,EAAWE,EAASC,K,QCxC1B,I,SCSA,MAxBA,WACE,OAAoCS,EAAAA,EAAAA,UAAqB,CACvDC,MAAO,EACPC,OAAQ,IAFV,eAAOC,EAAP,KAAmBC,EAAnB,KAKMC,EAAa,WACjBD,EAAc,CACZH,MAAOhB,OAAOqB,WACdJ,OAAQjB,OAAOsB,eAYnB,OARAC,EAAiB,SAAUH,GAG3BX,GAA0B,WACxBW,MAEC,IAEIF,G,yFCvBM,SAASM,IACpB,IAAOR,EAASS,IAATT,MACDU,GAAWC,EAAAA,EAAAA,MAEjB,OAAO,iCACH,SAACrC,EAAA,EAAD,CACIC,MAAO,CACH,CAAEQ,KAAM,OAAQD,KAAM,MAE1BN,QAAQ,YAGZ,2BACI,SAAC,IAAD,CAAiBoC,KAAMC,EAAAA,MAD3B,kBAIA,SAACC,EAAA,EAAD,CACIC,OAAQ,CACJ,CAAEC,KAAM,aAAchB,MAAOA,EAAQ,IAAM,MAAQ,OACnD,CAAEgB,KAAM,OAAQhB,MAAOA,EAAQ,IAAM,MAAQ,QAHrD,SAMKiB,OAAOC,OAAOC,EAAAA,GAAgBxC,KAAI,SAAAyC,GAAO,OAAI,SAACN,EAAA,EAAD,CAAwBO,QAAS,EAC3E,wBACI,6BAASC,EAAAA,EAAAA,IAAcF,QAE3B,SAACG,EAAA,EAAD,CAAQC,QAAS,kBAAMd,EAAS,WAAD,OAAYU,KAA3C,0BAJyDA","sources":["webpack://sportsday1.5/./src/styles/Breadcrumb.module.scss?853d","components/Breadcrumb.tsx","../node_modules/usehooks-ts/src/useBoolean/useBoolean.ts","../node_modules/usehooks-ts/src/useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.ts","../node_modules/usehooks-ts/src/useEventListener/useEventListener.ts","../node_modules/usehooks-ts/src/useTimeout/useTimeout.ts","../node_modules/usehooks-ts/src/useWindowSize/useWindowSize.ts","pages/Event/EventsList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"breadcrumb\":\"Breadcrumb_breadcrumb__qk236\"};","import styles from '../styles/Breadcrumb.module.scss'\nimport { Link } from 'react-router-dom';\n\nexport default function Breadcrumb(\n    { paths, current }: {\n        paths: {\n            name: string,\n            link: string,\n        }[],\n        current: string,\n    }\n) {\n    return <div className={styles.breadcrumb}>\n        {paths.map(path => <Link to={path.link} key={path.link}>\n            {path.name}\n        </Link>)}\n        <p className={styles.last}>\n            {current}\n        </p>\n    </div>\n}\n","import { Dispatch, SetStateAction, useCallback, useState } from 'react'\n\ninterface ReturnType {\n  value: boolean\n  setValue: Dispatch<SetStateAction<boolean>>\n  setTrue: () => void\n  setFalse: () => void\n  toggle: () => void\n}\n\nfunction useBoolean(defaultValue?: boolean): ReturnType {\n  const [value, setValue] = useState(!!defaultValue)\n\n  const setTrue = useCallback(() => setValue(true), [])\n  const setFalse = useCallback(() => setValue(false), [])\n  const toggle = useCallback(() => setValue(x => !x), [])\n\n  return { value, setValue, setTrue, setFalse, toggle }\n}\n\nexport default useBoolean\n","import { useEffect, useLayoutEffect } from 'react'\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nexport default useIsomorphicLayoutEffect\n","import { RefObject, useEffect, useRef } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-isomorphic-layout-effect\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect'\n\n// Window Event based useEventListener interface\nfunction useEventListener<K extends keyof WindowEventMap>(\n  eventName: K,\n  handler: (event: WindowEventMap[K]) => void,\n  element?: undefined,\n  options?: boolean | AddEventListenerOptions,\n): void\n\n// Element Event based useEventListener interface\nfunction useEventListener<\n  K extends keyof HTMLElementEventMap,\n  T extends HTMLElement = HTMLDivElement,\n>(\n  eventName: K,\n  handler: (event: HTMLElementEventMap[K]) => void,\n  element: RefObject<T>,\n  options?: boolean | AddEventListenerOptions,\n): void\n\n// Document Event based useEventListener interface\nfunction useEventListener<K extends keyof DocumentEventMap>(\n  eventName: K,\n  handler: (event: DocumentEventMap[K]) => void,\n  element: RefObject<Document>,\n  options?: boolean | AddEventListenerOptions,\n): void\n\nfunction useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap,\n  T extends HTMLElement | void = void,\n>(\n  eventName: KW | KH,\n  handler: (\n    event: WindowEventMap[KW] | HTMLElementEventMap[KH] | Event,\n  ) => void,\n  element?: RefObject<T>,\n  options?: boolean | AddEventListenerOptions,\n) {\n  // Create a ref that stores handler\n  const savedHandler = useRef(handler)\n\n  useIsomorphicLayoutEffect(() => {\n    savedHandler.current = handler\n  }, [handler])\n\n  useEffect(() => {\n    // Define the listening target\n    const targetElement: T | Window = element?.current || window\n    if (!(targetElement && targetElement.addEventListener)) {\n      return\n    }\n\n    // Create event listener that calls handler function stored in ref\n    const eventListener: typeof handler = event => savedHandler.current(event)\n\n    targetElement.addEventListener(eventName, eventListener, options)\n\n    // Remove event listener on cleanup\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener)\n    }\n  }, [eventName, element, options])\n}\n\nexport default useEventListener\n","import { useEffect, useRef } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-isomorphic-layout-effect\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect'\n\nfunction useTimeout(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback)\n\n  // Remember the latest callback if it changes.\n  useIsomorphicLayoutEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the timeout.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    // Note: 0 is a valid value for delay.\n    if (!delay && delay !== 0) {\n      return\n    }\n\n    const id = setTimeout(() => savedCallback.current(), delay)\n\n    return () => clearTimeout(id)\n  }, [delay])\n}\n\nexport default useTimeout\n","import { useState } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-event-listener\nimport { useEventListener } from '../useEventListener'\n// See: https://usehooks-ts.com/react-hook/use-isomorphic-layout-effect\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect'\n\ninterface WindowSize {\n  width: number\n  height: number\n}\n\nfunction useWindowSize(): WindowSize {\n  const [windowSize, setWindowSize] = useState<WindowSize>({\n    width: 0,\n    height: 0,\n  })\n\n  const handleSize = () => {\n    setWindowSize({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    })\n  }\n\n  useEventListener('resize', handleSize)\n\n  // Set size at the first client-side load\n  useIsomorphicLayoutEffect(() => {\n    handleSize()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return windowSize\n}\n\nexport default useWindowSize\n","import { useWindowSize } from 'usehooks-ts';\nimport { Table, TableRow } from '../../components/Table';\nimport { SportEventName } from 'mgssportsday-api/dist/types';\nimport { eventIdToName } from '../../api/helpers';\nimport Button from '../../components/Button';\nimport { useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrophy } from '@fortawesome/free-solid-svg-icons';\nimport Breadcrumb from '../../components/Breadcrumb';\n\nexport default function EventsList() {\n    const {width} = useWindowSize();\n    const navigate = useNavigate()\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n            ]}\n            current='Events'\n        />\n\n        <h1>\n            <FontAwesomeIcon icon={faTrophy} /> All events\n        </h1>\n\n        <Table\n            header={[\n                { text: 'Event name', width: width > 900 ? '80%' : '50%' },\n                { text: 'View', width: width > 900 ? '20%' : '50%' },\n            ]}\n        >\n            {Object.values(SportEventName).map(eventId => <TableRow key={eventId} columns={[\n                <p>\n                    <strong>{eventIdToName(eventId)}</strong>\n                </p>,\n                <Button onClick={() => navigate(`/events/${eventId}`)}>\n                    View event\n                </Button>\n            ]} />)}\n        </Table>\n    </>\n}\n"],"names":["Breadcrumb","paths","current","className","styles","map","path","to","link","name","window","useLayoutEffect","useEffect","eventName","handler","element","options","savedHandler","useRef","useIsomorphicLayoutEffect","targetElement","addEventListener","eventListener","event","removeEventListener","useState","width","height","windowSize","setWindowSize","handleSize","innerWidth","innerHeight","useEventListener","EventsList","useWindowSize","navigate","useNavigate","icon","faTrophy","Table","header","text","Object","values","SportEventName","eventId","columns","eventIdToName","Button","onClick"],"sourceRoot":""}