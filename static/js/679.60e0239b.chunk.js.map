{"version":3,"file":"static/js/679.60e0239b.chunk.js","mappings":"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","sources":["webpack://sportsday1.5/./src/styles/Breadcrumb.module.scss?853d","components/Breadcrumb.tsx","webpack://sportsday1.5/./src/styles/TabSwitcher.module.scss?a1a8","components/TabSwitcher.tsx","pages/Form/FormsList.tsx","components/RecordTable.tsx","pages/RecordsOverview.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"breadcrumb\":\"Breadcrumb_breadcrumb__qk236\"};","import styles from '../styles/Breadcrumb.module.scss'\nimport { Link } from 'react-router-dom';\n\nexport default function Breadcrumb(\n    { paths, current }: {\n        paths: {\n            name: string,\n            link: string,\n        }[],\n        current: string,\n    }\n) {\n    return <div className={styles.breadcrumb}>\n        {paths.map(path => <Link to={path.link} key={path.link}>\n            {path.name}\n        </Link>)}\n        <p className={styles.last}>\n            {current}\n        </p>\n    </div>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TabSwitcher_container__G4mUd\",\"tabSelect\":\"TabSwitcher_tabSelect__hD89l\",\"active\":\"TabSwitcher_active__J2tLC\"};","import { ReactElement, useCallback, useState } from 'react';\nimport tabSwitcher from '../styles/TabSwitcher.module.scss';\n\ntype TabProps<T extends string | number> = {\n    label: T;\n    dataKey?: T | string | number;\n    children?: ReactElement | ReactElement[];\n}\n\nexport function Tab<T extends string | number>(\n    {\n        children,\n    }: TabProps<T>,\n): ReactElement {\n    return <>{children}</>;\n}\n\nexport default function TabSwitcher<T extends number | string>(\n    {\n        children,\n        initialValue,\n        onChange,\n    }: {\n        children?: ReactElement<TabProps<T>> | ReactElement<TabProps<T>>[];\n        initialValue?: T;\n        onChange?: (value: T | string | number) => void;\n    },\n) {\n    const getKey = (year: ReactElement<TabProps<T>>) => year.props.dataKey ?? year.props.label as T;\n\n    const childrenList = children && (\n        children.hasOwnProperty('length') ?\n            children as ReactElement<TabProps<T>>[] :\n            [children as ReactElement<TabProps<T>>]\n    );\n    const [currentValue, setCurrentValue] = useState(\n        childrenList ? (initialValue ?? getKey(childrenList[0])) : null,\n    );\n\n    const setTab = useCallback((value: T | string | number) => {\n        onChange && onChange(value);\n        setCurrentValue(value);\n    }, [onChange]);\n\n    return (\n        <div className={tabSwitcher.container}>\n            <div className={tabSwitcher.tabSelect}>\n                {\n                    childrenList?.map(child => (\n                        <button\n                            className={currentValue === getKey(child) ? tabSwitcher.active : undefined}\n                            onClick={() => setTab(getKey(child))}\n                            key={getKey(child)}\n                        >\n                            {child.props.label}\n                        </button>\n                    ))\n                }\n            </div>\n\n            <div className={tabSwitcher.tabData}>\n                {\n                    childrenList?.filter(e => getKey(e) === currentValue)[0]\n                }\n            </div>\n        </div>\n    );\n}\n","import { YearGroup } from 'mgssportsday-api/dist/types';\nimport { useApiQuery } from '../../api/context';\nimport { formLabel, useDefaultTab } from '../../api/helpers';\nimport Breadcrumb from '../../components/Breadcrumb';\nimport ColourCodedFormLabel from '../../components/ColourCodedFormLabel';\nimport { Table, TableRow } from '../../components/Table';\nimport TabSwitcher, { Tab } from '../../components/TabSwitcher';\n\nexport const yearGroups: YearGroup[] = [7, 8, 9, 10];\n\nexport default function FormsList() {\n    const [allStandings] = useApiQuery(api => api.getSummaryStandings());\n    const [defaultTab, setDefaultTab] = useDefaultTab();\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n            ]}\n            current='Forms'\n        />\n\n        <h1>All forms</h1>\n\n        <TabSwitcher\n            initialValue={defaultTab}\n            onChange={setDefaultTab as (newValue: any) => void}\n        >\n            {\n                yearGroups.map(year => (\n                    <Tab\n                        label={`Year ${year}`}\n                        key={year}\n                        dataKey={year}\n                    >\n                        {\n                            allStandings && (\n                                <Table\n                                    header={[\n                                        { text: 'Form' },\n                                        { text: `Year ${year} rank`, sortable: true },\n                                        { text: 'School rank', sortable: true },\n                                        { text: 'Total points' },\n                                    ]}\n                                >\n                                    {\n                                        allStandings\n                                            .filter(form => form.year === year)\n                                            .map(form => (\n                                                <TableRow\n                                                    columns={[\n                                                        <ColourCodedFormLabel form={form} />,\n                                                        { value: form.yearPos, autoHighlight: true },\n                                                        { value: form.schoolPos, autoHighlight: true },\n                                                        { value: form.points },\n                                                    ]}\n                                                    key={formLabel(form)}\n                                                />\n                                            ))\n                                    }\n                                </Table>\n                            )\n                        }\n                    </Tab>\n                ))\n            }\n        </TabSwitcher>\n    </>;\n}\n","import { EventRecordStanding, YearGroup } from 'mgssportsday-api/dist/types';\nimport { ReactElement } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useApiQuery } from '../api/context';\nimport { eventIdToName, unitNameToSuffix, secondsToMinutes } from '../api/helpers';\nimport { Table, TableRow } from './Table';\n\nexport default function RecordTable(\n    {\n        records,\n    }: { records: EventRecordStanding[] | undefined },\n): ReactElement {\n    return (\n        <>\n            {\n                records && <Table\n                    header={[\n                        { text: 'Event' },\n                        { text: `Record year`, sortable: true },\n                        { text: 'Record score', sortable: true },\n                        { text: `2022 best score`, sortable: true },\n                        { text: '2022 champion' },\n                    ]}\n                >\n                    {\n                        records.map(event => (\n                                <TableRow\n                                    columns={[\n                                        <Link to={`/events/${event.event}`}>\n                                            {eventIdToName(event.event)}\n                                        </Link>,\n                                        { value: event.standingYear },\n                                        {\n                                            value: secondsToMinutes(`${event.standingScore}${unitNameToSuffix(event.units)}`),\n                                            sortValue: event.standingScore,\n                                        },\n                                        {\n                                            value: event.currentScore ?\n                                                secondsToMinutes(`${event.currentScore}${unitNameToSuffix(event.units)}`) :\n                                                '',\n                                            sortValue: event.currentScore || -100,\n                                        },\n                                        { value: event.currentHolder },\n                                    ]}\n                                    key={event.event}\n                                />\n                            ))\n                    }\n                </Table>\n            }\n        </>\n    );\n}\n","import { EventRecordStanding, YearGroup } from 'mgssportsday-api/dist/types';\nimport { useMemo } from 'react';\nimport { useApiQuery } from '../api/context';\nimport { getRankWhere, useDefaultTab } from '../api/helpers';\nimport Breadcrumb from '../components/Breadcrumb';\nimport RecordTable from '../components/RecordTable';\nimport { Table, TableRow } from '../components/Table';\nimport TabSwitcher, { Tab } from '../components/TabSwitcher';\nimport { yearGroups } from './Form/FormsList';\n\nfunction YearGroupRecordTable(\n    {\n        year,\n    }: { year: YearGroup },\n) {\n    const records = useApiQuery(api => api.getYearGroupRecords(year))[0];\n\n    return <RecordTable records={records} />;\n}\n\nfunction AllRecordTable() {\n    const yearGroupRecords = [\n        useApiQuery(api => api.getYearGroupRecords(7))[0],\n        useApiQuery(api => api.getYearGroupRecords(8))[0],\n        useApiQuery(api => api.getYearGroupRecords(9))[0],\n        useApiQuery(api => api.getYearGroupRecords(10))[0],\n    ];\n\n    const getBestRecord = (\n        yearGroups: (EventRecordStanding[] | undefined)[],\n        event: EventRecordStanding,\n        key: keyof EventRecordStanding,\n    ) => yearGroups\n        .map(yearGroup => yearGroup?.filter(yearGroupEvent => yearGroupEvent.event === event.event)[0])\n        .map((ygResults, yearGroup): [EventRecordStanding | undefined, number, number | undefined] => [\n            ygResults,\n            yearGroup,\n            ygResults && ygResults[key] as number,\n        ])\n        .filter(e => e[2])\n        .sort((a, b) => b[2] && a[2] ? event.units === 'second' ? a[2] - b[2] : b[2] - a[2] : 1000)[0];\n    const records = yearGroupRecords[0]?.map((event): EventRecordStanding => {\n        const bestCurrent = getBestRecord(yearGroupRecords, event, 'currentScore');\n        const bestStanding = getBestRecord(yearGroupRecords, event, 'standingScore');\n\n        return {\n            doScore: event.doScore,\n            event: event.event,\n            units: event.units,\n\n            standingHolder: bestStanding && bestStanding[0] ?\n                `${bestStanding[0].standingHolder} (y${yearGroups[bestStanding[1]]})` :\n                '',\n            standingYear: bestStanding && bestStanding[0]?.standingYear || 2021,\n            standingScore: bestStanding && bestStanding[0]?.standingScore || 0,\n\n            currentHolder: bestCurrent && bestCurrent[0] ?\n                `${bestCurrent[0].standingHolder} (y${yearGroups[bestCurrent[1]]})` :\n                '',\n            currentYear: bestCurrent && bestCurrent[0]?.currentYear || 2021,\n            currentScore: bestCurrent && bestCurrent[0]?.currentScore || 0,\n        };\n    });\n\n    return <RecordTable records={records} />;\n}\n\nexport default function RecordsOverview() {\n    const [defaultTab, setDefaultTab] = useDefaultTab();\n    const [recordSummary] = useApiQuery(api => api.getRecordsSummaryStats());\n\n    const recordSummaryRows = useMemo(() => {\n        return recordSummary && recordSummary.map(yearGroup => (\n            <TableRow\n                key={yearGroup.year}\n                columns={[\n                    { value: yearGroup.year, isHeader: true },\n                    {\n                        value: `${yearGroup.recordsBroken} broken`,\n                        autoHighlight: yearGroup.year !== 'All year groups' && yearGroup.recordsBroken > 0,\n                        isHeader: yearGroup.year === 'All year groups',\n                        ...(yearGroup.year === 'All year groups' ? {} : {\n                            highlightValue: getRankWhere(\n                                recordSummary.filter(e => e.year !== 'All year groups'),\n                                'year',\n                                yearGroup.year,\n                                'recordsBroken',\n                            ),\n                        }),\n                    },\n                    {\n                        value: `${yearGroup.recordsEqualled} equalled`,\n                        autoHighlight: yearGroup.year !== 'All year groups' && yearGroup.recordsEqualled > 0,\n                        isHeader: yearGroup.year === 'All year groups',\n                        ...(yearGroup.year === 'All year groups' ? {} : {\n                            highlightValue: getRankWhere(\n                                recordSummary.filter(e => e.year !== 'All year groups'),\n                                'year',\n                                yearGroup.year,\n                                'recordsEqualled',\n                            ),\n                        }),\n                    },\n                ]}\n            />\n        ))\n    }, [recordSummary]);\n\n    return <>\n        <Breadcrumb\n            paths={[\n                { name: 'Home', link: '/' },\n            ]}\n            current='Records'\n        />\n\n        <h1>Records</h1>\n\n        <TabSwitcher\n            initialValue={defaultTab}\n            onChange={setDefaultTab as (newValue: any) => void}\n        >\n            {\n                [\n                    ...yearGroups,\n                    'All',\n                ].map((year) => (\n                    <Tab\n                        label={year === 'All' ? year : `Year ${year}`}\n                        key={year}\n                        dataKey={year}\n                    >\n                        {\n                            year === 'All' ? (\n                                <AllRecordTable />\n                            ) : (\n                                <YearGroupRecordTable year={year as YearGroup} />\n                            )\n                        }\n                    </Tab>\n                ))\n            }\n        </TabSwitcher>\n\n        {\n            recordSummary !== undefined && <Table>\n                {\n                    recordSummaryRows\n                }\n            </Table>\n        }\n    </>;\n}\n"],"names":["Breadcrumb","paths","current","className","styles","map","path","to","link","name","Tab","children","TabSwitcher","initialValue","onChange","getKey","year","props","dataKey","label","childrenList","hasOwnProperty","useState","currentValue","setCurrentValue","setTab","useCallback","value","tabSwitcher","child","undefined","onClick","filter","e","yearGroups","FormsList","useApiQuery","api","getSummaryStandings","allStandings","useDefaultTab","defaultTab","setDefaultTab","header","text","sortable","form","columns","yearPos","autoHighlight","schoolPos","points","formLabel","RecordTable","records","Table","event","eventIdToName","standingYear","secondsToMinutes","standingScore","unitNameToSuffix","units","sortValue","currentScore","currentHolder","YearGroupRecordTable","getYearGroupRecords","AllRecordTable","yearGroupRecords","getBestRecord","key","yearGroup","yearGroupEvent","ygResults","sort","a","b","bestCurrent","bestStanding","doScore","standingHolder","currentYear","RecordsOverview","getRecordsSummaryStats","recordSummary","recordSummaryRows","useMemo","isHeader","recordsBroken","highlightValue","getRankWhere","recordsEqualled"],"sourceRoot":""}